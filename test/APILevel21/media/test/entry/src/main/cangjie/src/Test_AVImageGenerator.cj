/*
 * Copyright (c) 2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package ohos_app_cangjie_entry

import std.sync.*
import std.time.*
import std.unittest.*
import std.unittest.common.*
import std.unittest.testmacro.*
import MediaKit.*
import ohos.base.*
import PerformanceAnalysisKit.Hilog
@Test
class Test_AVImageGenerator {
    @TestCase
    @Tag[APILevel21, TestLevel0]
    func testfs() {
        let timeUs = 0
        let queryOption = AVImageQueryOptions.AvImageQueryNextSync
        let param = PixelMapParams(width: 300, height: 300)
        let generator = createAVImageGenerator()
        let rawFd = getAbilityContext().resourceManager.getRawFd("trailer.mp4")
        generator.fdSrc = AVFileDescriptor(rawFd.fd, offset: rawFd.offset, length: rawFd.length)
        let pic = generator.fetchFrameByTime(timeUs, queryOption, param)
        let avFileDescriptor = generator.fdSrc
        let fd = avFileDescriptor.fd
        generator.release()
        // fixing
         let i = pic.getImageInfo()
         Hilog.info(0, "CangjieTest", "h ${i.size.height} w ${i.size.width}")
        @Expect(true)
    }

    @TestCase
    @Tag[APILevel21, TestLevel0]
    func test_AVImageQueryOptions() {
        let aVImageQueryOptionsArr: Array<AVImageQueryOptions> = [AvImageQueryNextSync, AvImageQueryPreviousSync, AvImageQueryClosestSync, AvImageQueryClosest]
        let aVImageQueryOptionsArr2: Array<AVImageQueryOptions> = [AvImageQueryNextSync, AvImageQueryPreviousSync, AvImageQueryClosestSync, AvImageQueryClosest]
        let aVImageQueryOptionsStrArr: Array<String> = [
            "AVImageQueryOptions.AvImageQueryNextSync",
            "AVImageQueryOptions.AvImageQueryPreviousSync",
            "AVImageQueryOptions.AvImageQueryClosestSync",
            "AVImageQueryOptions.AvImageQueryClosest"
        ]
        for (i in 0..aVImageQueryOptionsArr.size) {
            @Expect(aVImageQueryOptionsArr[i].toString() == aVImageQueryOptionsStrArr[i])
            @Expect(aVImageQueryOptionsArr[i] == aVImageQueryOptionsArr[i])
            if (i + 1 < aVImageQueryOptionsArr.size) {
                @Expect(aVImageQueryOptionsArr[i] != aVImageQueryOptionsArr[i + 1])
            } else {
                @Expect(aVImageQueryOptionsArr[i] != aVImageQueryOptionsArr[0])
            }
        }
    }
}
